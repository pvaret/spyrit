# Copyright (c) 2007-2024 Pascal Varet <p.varet@gmail.com>
#
# This file is part of Spyrit.
#
# Spyrit is free software; you can redistribute it and/or modify it under the
# terms of the GNU General Public License version 3 as published by the Free
# Software Foundation.
#
# You should have received a copy of the GNU General Public License along with
# Spyrit; if not, write to the Free Software Foundation, Inc., 51 Franklin St,
# Fifth Floor, Boston, MA  02110-1301  USA
#

"""
Implements support for ANSI color codes and palettes.
"""


from abc import ABC, abstractmethod
from enum import IntEnum, StrEnum
from typing import Any


class Solarized(StrEnum):
    Base03 = "#002b36"
    Base02 = "#073642"
    Base01 = "#586e75"
    Base00 = "#657b83"
    Base0 = "#839496"
    Base1 = "#93a1a1"
    Base2 = "#eee8d5"
    Base3 = "#fdf6e3"

    Yellow = "#b58900"
    Orange = "#cb4b16"
    Red = "#dc322f"
    Magenta = "#d33682"
    Violet = "#6c71c4"
    Blue = "#268bd2"
    Cyan = "#2aa198"
    Green = "#859900"

    # Dark colors generated by taking the standard Solarized colors and
    # darkening them 20%.

    DarkYellow = "#916e00"
    DarkOrange = "#a23c12"
    DarkRed = "#b02826"
    DarkMagenta = "#a92b68"
    DarkViolet = "#565a9d"
    DarkBlue = "#1e6fa8"
    DarkCyan = "#22817a"
    DarkGreen = "#6a7a00"


class ANSIColorCodes(IntEnum):
    Black = 0
    Red = 1
    Green = 2
    Yellow = 3
    Blue = 4
    Magenta = 5
    Cyan = 6
    LightGray = 7
    DarkGray = 8
    LightRed = 9
    LightGreen = 10
    LightYellow = 11
    LightBlue = 12
    LightMagenta = 13
    LightCyan = 14
    White = 15


SolarizedPalette: dict[int, str] = {
    ANSIColorCodes.Black: Solarized.Base03,
    ANSIColorCodes.Red: Solarized.DarkRed,
    ANSIColorCodes.Green: Solarized.DarkGreen,
    ANSIColorCodes.Yellow: Solarized.DarkYellow,
    ANSIColorCodes.Blue: Solarized.DarkBlue,
    ANSIColorCodes.Magenta: Solarized.DarkMagenta,
    ANSIColorCodes.Cyan: Solarized.DarkCyan,
    ANSIColorCodes.LightGray: Solarized.Base0,
    ANSIColorCodes.DarkGray: Solarized.Base01,
    ANSIColorCodes.LightRed: Solarized.Red,
    ANSIColorCodes.LightGreen: Solarized.Green,
    ANSIColorCodes.LightYellow: Solarized.Yellow,
    ANSIColorCodes.LightBlue: Solarized.Blue,
    ANSIColorCodes.LightMagenta: Solarized.Magenta,
    ANSIColorCodes.LightCyan: Solarized.Cyan,
    ANSIColorCodes.White: Solarized.Base1,
}

ExtendedANSIPalette = {
    # Extended colors:
    16: "#000000",
    17: "#00005f",
    18: "#000087",
    19: "#0000af",
    20: "#0000d7",
    21: "#0000ff",
    22: "#005f00",
    23: "#005f5f",
    24: "#005f87",
    25: "#005faf",
    26: "#005fd7",
    27: "#005fff",
    28: "#008700",
    29: "#00875f",
    30: "#008787",
    31: "#0087af",
    32: "#0087d7",
    33: "#0087ff",
    34: "#00af00",
    35: "#00af5f",
    36: "#00af87",
    37: "#00afaf",
    38: "#00afd7",
    39: "#00afff",
    40: "#00d700",
    41: "#00d75f",
    42: "#00d787",
    43: "#00d7af",
    44: "#00d7d7",
    45: "#00d7ff",
    46: "#00ff00",
    47: "#00ff5f",
    48: "#00ff87",
    49: "#00ffaf",
    50: "#00ffd7",
    51: "#00ffff",
    52: "#5f0000",
    53: "#5f005f",
    54: "#5f0087",
    55: "#5f00af",
    56: "#5f00d7",
    57: "#5f00ff",
    58: "#5f5f00",
    59: "#5f5f5f",
    60: "#5f5f87",
    61: "#5f5faf",
    62: "#5f5fd7",
    63: "#5f5fff",
    64: "#5f8700",
    65: "#5f875f",
    66: "#5f8787",
    67: "#5f87af",
    68: "#5f87d7",
    69: "#5f87ff",
    70: "#5faf00",
    71: "#5faf5f",
    72: "#5faf87",
    73: "#5fafaf",
    74: "#5fafd7",
    75: "#5fafff",
    76: "#5fd700",
    77: "#5fd75f",
    78: "#5fd787",
    79: "#5fd7af",
    80: "#5fd7d7",
    81: "#5fd7ff",
    82: "#5fff00",
    83: "#5fff5f",
    84: "#5fff87",
    85: "#5fffaf",
    86: "#5fffd7",
    87: "#5fffff",
    88: "#870000",
    89: "#87005f",
    90: "#870087",
    91: "#8700af",
    92: "#8700d7",
    93: "#8700ff",
    94: "#875f00",
    95: "#875f5f",
    96: "#875f87",
    97: "#875faf",
    98: "#875fd7",
    99: "#875fff",
    100: "#878700",
    101: "#87875f",
    102: "#878787",
    103: "#8787af",
    104: "#8787d7",
    105: "#8787ff",
    106: "#87af00",
    107: "#87af5f",
    108: "#87af87",
    109: "#87afaf",
    110: "#87afd7",
    111: "#87afff",
    112: "#87d700",
    113: "#87d75f",
    114: "#87d787",
    115: "#87d7af",
    116: "#87d7d7",
    117: "#87d7ff",
    118: "#87ff00",
    119: "#87ff5f",
    120: "#87ff87",
    121: "#87ffaf",
    122: "#87ffd7",
    123: "#87ffff",
    124: "#af0000",
    125: "#af005f",
    126: "#af0087",
    127: "#af00af",
    128: "#af00d7",
    129: "#af00ff",
    130: "#af5f00",
    131: "#af5f5f",
    132: "#af5f87",
    133: "#af5faf",
    134: "#af5fd7",
    135: "#af5fff",
    136: "#af8700",
    137: "#af875f",
    138: "#af8787",
    139: "#af87af",
    140: "#af87d7",
    141: "#af87ff",
    142: "#afaf00",
    143: "#afaf5f",
    144: "#afaf87",
    145: "#afafaf",
    146: "#afafd7",
    147: "#afafff",
    148: "#afd700",
    149: "#afd75f",
    150: "#afd787",
    151: "#afd7af",
    152: "#afd7d7",
    153: "#afd7ff",
    154: "#afff00",
    155: "#afff5f",
    156: "#afff87",
    157: "#afffaf",
    158: "#afffd7",
    159: "#afffff",
    160: "#d70000",
    161: "#d7005f",
    162: "#d70087",
    163: "#d700af",
    164: "#d700d7",
    165: "#d700ff",
    166: "#d75f00",
    167: "#d75f5f",
    168: "#d75f87",
    169: "#d75faf",
    170: "#d75fd7",
    171: "#d75fff",
    172: "#d78700",
    173: "#d7875f",
    174: "#d78787",
    175: "#d787af",
    176: "#d787d7",
    177: "#d787ff",
    178: "#d7af00",
    179: "#d7af5f",
    180: "#d7af87",
    181: "#d7afaf",
    182: "#d7afd7",
    183: "#d7afff",
    184: "#d7d700",
    185: "#d7d75f",
    186: "#d7d787",
    187: "#d7d7af",
    188: "#d7d7d7",
    189: "#d7d7ff",
    190: "#d7ff00",
    191: "#d7ff5f",
    192: "#d7ff87",
    193: "#d7ffaf",
    194: "#d7ffd7",
    195: "#d7ffff",
    196: "#ff0000",
    197: "#ff005f",
    198: "#ff0087",
    199: "#ff00af",
    200: "#ff00d7",
    201: "#ff00ff",
    202: "#ff5f00",
    203: "#ff5f5f",
    204: "#ff5f87",
    205: "#ff5faf",
    206: "#ff5fd7",
    207: "#ff5fff",
    208: "#ff8700",
    209: "#ff875f",
    210: "#ff8787",
    211: "#ff87af",
    212: "#ff87d7",
    213: "#ff87ff",
    214: "#ffaf00",
    215: "#ffaf5f",
    216: "#ffaf87",
    217: "#ffafaf",
    218: "#ffafd7",
    219: "#ffafff",
    220: "#ffd700",
    221: "#ffd75f",
    222: "#ffd787",
    223: "#ffd7af",
    224: "#ffd7d7",
    225: "#ffd7ff",
    226: "#ffff00",
    227: "#ffff5f",
    228: "#ffff87",
    229: "#ffffaf",
    230: "#ffffd7",
    231: "#ffffff",
    # 24 shades of grey:
    232: "#080808",
    233: "#121212",
    234: "#1c1c1c",
    235: "#262626",
    236: "#303030",
    237: "#3a3a3a",
    238: "#444444",
    239: "#4e4e4e",
    240: "#585858",
    241: "#626262",
    242: "#6c6c6c",
    243: "#767676",
    244: "#808080",
    245: "#8a8a8a",
    246: "#949494",
    247: "#9e9e9e",
    248: "#a8a8a8",
    249: "#b2b2b2",
    250: "#bcbcbc",
    251: "#c6c6c6",
    252: "#d0d0d0",
    253: "#dadada",
    254: "#e4e4e4",
    255: "#eeeeee",
}


class Color(ABC):
    @abstractmethod
    def asHex(self) -> str:
        ...

    def isUnset(self) -> bool:
        return False

    def bright(self) -> "Color":
        return self

    @abstractmethod
    def toStr(self) -> str:
        ...

    def __eq__(self, other: Any) -> bool:
        if not isinstance(other, Color):
            return False

        return (
            self.isUnset() and other.isUnset()
        ) or self.asHex().lower() == other.asHex().lower()


class NoColor(Color):
    def isUnset(self) -> bool:
        return True

    def asHex(self) -> str:
        return ""

    def toStr(self) -> str:
        return "-"


class ANSIColor(Color):
    __match_args__ = ("_ansi_code",)

    _ansi_code: int

    def __init__(self, ansi_code: int) -> None:
        if not 0 <= ansi_code <= 255:
            ansi_code = 0
        self._ansi_code = ansi_code

    def asHex(self) -> str:
        if (hex_ := SolarizedPalette.get(self._ansi_code, None)) is not None:
            return hex_

        if (hex_ := ExtendedANSIPalette.get(self._ansi_code, None)) is not None:
            return hex_

        return "#000000"

    def toStr(self) -> str:
        for code in ANSIColorCodes:
            if code == self._ansi_code:
                return code.name

        return str(self._ansi_code)

    def bright(self) -> "ANSIColor":
        if not 0 <= (ansi_code := self._ansi_code) <= 7:
            return self
        return ANSIColor(ansi_code + 8)


class RGBColor(Color):
    _r: int
    _g: int
    _b: int

    def __init__(self, r: int, g: int, b: int) -> None:
        if r < 0:
            r = 0
        elif 255 < r:
            r = 255

        if g < 0:
            g = 0
        elif 255 < g:
            g = 255

        if b < 0:
            b = 0
        elif 255 < b:
            b = 255

        self._r = r
        self._g = g
        self._b = b

    def asHex(self) -> str:
        return f"#{self._r:02x}{self._g:02x}{self._b:02x}"

    def toStr(self) -> str:
        return self.asHex()

    def bright(self) -> "RGBColor":
        r, g, b = brighten(
            self._r / 255, self._g / 255, self._b / 255, brightness=0.1
        )

        return RGBColor(round(r * 255), round(g * 255), round(b * 255))


def brighten(
    r: float, g: float, b: float, brightness: float
) -> tuple[float, float, float]:
    h, s, l_ = rgb_to_hsl(r, g, b)

    dl = 1.0 - l_
    dl -= dl * brightness
    l_ = 1.0 - dl

    return hsl_to_rgb(h, s, l_)


def rgb_to_hsl(r: float, g: float, b: float) -> tuple[float, float, float]:
    maxf = max((r, g, b))
    minf = min((r, g, b))
    l_ = (maxf + minf) / 2

    if maxf == minf:
        h = s = 0.0

    else:
        if l_ > 0.5:
            s = (maxf - minf) / (2.0 - (maxf + minf))
        else:
            s = (maxf - minf) / (maxf + minf)

        if maxf == r:
            h = ((g - b) / (maxf - minf)) / 6
        elif maxf == g:
            h = ((b - r) / (maxf - minf) + 2.0) / 6
        else:
            h = ((r - g) / (maxf - minf) + 4.0) / 6

    return h, s, l_


def hsl_to_rgb(h: float, s: float, l_: float) -> tuple[float, float, float]:
    if s == 0.0:
        r = g = b = l_

    else:
        if l_ < 0.5:
            q = l_ * (1 + s)
        else:
            q = l_ + s * (1 - l_)
        p = 2 * l_ - q

        r = _hue_to_rgb(p, q, h + 1 / 3)
        g = _hue_to_rgb(p, q, h)
        b = _hue_to_rgb(p, q, h - 1 / 3)

    return r, g, b


def _hue_to_rgb(p: float, q: float, h: float) -> float:
    h %= 1
    if h < 1 / 6:
        return p + (q - p) * 6 * h
    if h < 1 / 2:
        return q
    if h < 2 / 3:
        return p + (q - p) * (2 / 3 - h) * 6
    return p
